name: Update Shadowrocket Config

on:
  schedule:
    # 每天早上8点（UTC时间，北京时间需要减8小时，所以是0点UTC）
    - cron: '0 0 * * *'
  workflow_dispatch: # 允许手动触发

jobs:
  update-config:
    runs-on: ubuntu-latest
    permissions:
      contents: write # 赋予写权限
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download and process config
      run: |
        # 下载原始配置文件
        echo "Downloading original config..."
        curl -o original.conf https://johnshall.github.io/Shadowrocket-ADBlock-Rules-Forever/sr_top500_whitelist.conf
        
        # 检查下载是否成功
        if [ ! -f original.conf ]; then
          echo "Failed to download config file"
          exit 1
        fi
        
        echo "Processing config file..."
        
        # 创建临时文件
        temp_file=$(mktemp)
        
        # 处理配置文件
        awk '
        BEGIN {
          in_general = 0
          dns_replaced = 0
          bypass_added = 0
          ipv6_added = 0
          prefer_ipv6_added = 0
          dns_direct_system_added = 0
          dns_direct_fallback_proxy_added = 0
          icmp_auto_reply_added = 0
          always_reject_url_rewrite_added = 0
          hijack_dns_added = 0
        }
        
        # 检测[General]部分
        /^\[General\]/ {
          in_general = 1
          print $0
          next
        }
        
        # 检测其他部分的开始
        /^\[.*\]/ && !/^\[General\]/ {
          if (in_general == 1) {
            # 在离开[General]部分前，添加缺少的配置项
            if (bypass_added == 0) {
              print "bypass-system = true"
              bypass_added = 1
            }
            if (ipv6_added == 0) {
              print "ipv6 = false"
              ipv6_added = 1
            }
            if (prefer_ipv6_added == 0) {
              print "prefer-ipv6 = false"
              prefer_ipv6_added = 1
            }
            if (dns_direct_system_added == 0) {
              print "dns-direct-system = false"
              dns_direct_system_added = 1
            }
            if (dns_direct_fallback_proxy_added == 0) {
              print "dns-direct-fallback-proxy = true"
              dns_direct_fallback_proxy_added = 1
            }
            if (icmp_auto_reply_added == 0) {
              print "icmp-auto-reply = false"
              icmp_auto_reply_added = 1
            }
            if (always_reject_url_rewrite_added == 0) {
              print "always-reject-url-rewrite = true"
              always_reject_url_rewrite_added = 1
            }
            if (hijack_dns_added == 0) {
              print "hijack-dns = 8.8.4.4:53"
              hijack_dns_added = 1
            }
          }
          in_general = 0
          print $0
          next
        }
        
        # 在[General]部分内处理
        {
          if (in_general == 1) {
            # 替换dns-server配置
            if (/^dns-server\s*=/) {
              print "dns-server = https://dns.google/dns-query#proxy,https://8.8.8.8/dns-query#proxy,https://cloudflare-dns.com/dns-query#proxy"
              dns_replaced = 1
            }
            # 替换或添加其他配置项
            else if (/^bypass-system\s*=/) {
              print "bypass-system = true"
              bypass_added = 1
            }
            else if (/^ipv6\s*=/) {
              print "ipv6 = false"
              ipv6_added = 1
            }
            else if (/^prefer-ipv6\s*=/) {
              print "prefer-ipv6 = false"
              prefer_ipv6_added = 1
            }
            else if (/^dns-direct-system\s*=/) {
              print "dns-direct-system = false"
              dns_direct_system_added = 1
            }
            else if (/^dns-direct-fallback-proxy\s*=/) {
              print "dns-direct-fallback-proxy = true"
              dns_direct_fallback_proxy_added = 1
            }
            else if (/^icmp-auto-reply\s*=/) {
              print "icmp-auto-reply = false"
              icmp_auto_reply_added = 1
            }
            else if (/^always-reject-url-rewrite\s*=/) {
              print "always-reject-url-rewrite = true"
              always_reject_url_rewrite_added = 1
            }
            else if (/^hijack-dns\s*=/) {
              print "hijack-dns = 8.8.4.4:53"
              hijack_dns_added = 1
            }
            else {
              print $0
            }
          } else {
            print $0
          }
        }
        
        # 文件结束时，如果还在[General]部分，添加缺少的配置项
        END {
          if (in_general == 1) {
            if (dns_replaced == 0) {
              print "dns-server = https://dns.google/dns-query#proxy,https://8.8.8.8/dns-query#proxy,https://cloudflare-dns.com/dns-query#proxy"
            }
            if (bypass_added == 0) {
              print "bypass-system = true"
            }
            if (ipv6_added == 0) {
              print "ipv6 = false"
            }
            if (prefer_ipv6_added == 0) {
              print "prefer-ipv6 = false"
            }
            if (dns_direct_system_added == 0) {
              print "dns-direct-system = false"
            }
            if (dns_direct_fallback_proxy_added == 0) {
              print "dns-direct-fallback-proxy = true"
            }
            if (icmp_auto_reply_added == 0) {
              print "icmp-auto-reply = false"
            }
            if (always_reject_url_rewrite_added == 0) {
              print "always-reject-url-rewrite = true"
            }
            if (hijack_dns_added == 0) {
              print "hijack-dns = 8.8.4.4:53"
            }
          }
        }
        ' original.conf > "$temp_file"
        
        # 将处理后的内容保存为最终文件
        mv "$temp_file" shadowrocket_config.conf
        
        echo "Config file processed successfully"
        
        # 显示处理结果的摘要
        echo "=== Configuration Summary ==="
        grep -A 20 "\[General\]" shadowrocket_config.conf | head -25
    
    - name: Validate config file
      run: |
        echo "Validating config file..."
        
        # 检查文件是否存在且不为空
        if [ ! -s shadowrocket_config.conf ]; then
          echo "Config file is empty or missing"
          exit 1
        fi
        
        # 检查必要的配置项是否存在
        required_configs=(
          "dns-server = https://dns.google/dns-query#proxy,https://8.8.8.8/dns-query#proxy,https://cloudflare-dns.com/dns-query#proxy"
          "bypass-system = true"
          "ipv6 = false"
          "prefer-ipv6 = false"
          "dns-direct-system = false"
          "dns-direct-fallback-proxy = true"
          "icmp-auto-reply = false"
          "always-reject-url-rewrite = true"
          "hijack-dns = 8.8.4.4:53"
        )
        
        for config in "${required_configs[@]}"; do
          if ! grep -q "^$config" shadowrocket_config.conf; then
            echo "Missing or incorrect configuration: $config"
            exit 1
          fi
        done
        
        echo "Config validation passed"
        
        # 显示文件大小和行数
        echo "File size: $(wc -c < shadowrocket_config.conf) bytes"
        echo "Line count: $(wc -l < shadowrocket_config.conf) lines"
    
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # 检查是否有变更
        if git diff --quiet HEAD shadowrocket_config.conf; then
          echo "No changes detected in config file"
        else
          git add shadowrocket_config.conf
          git commit -m "Update Shadowrocket config - $(date '+%Y-%m-%d %H:%M:%S UTC')"
          git push
          echo "Config file updated and pushed successfully"
        fi
    
    - name: Create release info
      run: |
        echo "=== Update Summary ===" >> update_summary.txt
        echo "Update Time: $(date '+%Y-%m-%d %H:%M:%S UTC')" >> update_summary.txt
        echo "Source URL: https://johnshall.github.io/Shadowrocket-ADBlock-Rules-Forever/sr_top500_whitelist.conf" >> update_summary.txt
        echo "File Size: $(wc -c < shadowrocket_config.conf) bytes" >> update_summary.txt
        echo "Line Count: $(wc -l < shadowrocket_config.conf) lines" >> update_summary.txt
        echo "" >> update_summary.txt
        echo "=== Applied Configurations ===" >> update_summary.txt
        echo "- DNS Server: https://dns.google/dns-query#proxy,https://8.8.8.8/dns-query#proxy,https://cloudflare-dns.com/dns-query#proxy" >> update_summary.txt
        echo "- Bypass System: true" >> update_summary.txt
        echo "- IPv6: false" >> update_summary.txt
        echo "- Prefer IPv6: false" >> update_summary.txt
        echo "- DNS Direct System: false" >> update_summary.txt
        echo "- DNS Direct Fallback Proxy: true" >> update_summary.txt
        echo "- ICMP Auto Reply: false" >> update_summary.txt
        echo "- Always Reject URL Rewrite: true" >> update_summary.txt
        echo "- Hijack DNS: 8.8.4.4:53" >> update_summary.txt
        
        cat update_summary.txt

        
    - name: Trigger Compress All Commits Action
      if: success() # 只有在前面的步骤都成功时才执行
      run: |
        echo "Triggering Compress All Commits action..."
        curl -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -d '{"event_type": "compress_commits", "client_payload": {"triggered_by": "shadowrocket_config_update", "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}}' \
          https://api.github.com/repos/${{ github.repository }}/dispatches
        
        echo "Compress All Commits action triggered successfully"
